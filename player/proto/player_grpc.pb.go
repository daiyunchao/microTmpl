// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: player.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PlayerClient is the client API for Player service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlayerClient interface {
	GetInfoById(ctx context.Context, in *ReqGetInfoById, opts ...grpc.CallOption) (*ResGetInfo, error)
	GetInfoByName(ctx context.Context, in *ReqGetInfoByName, opts ...grpc.CallOption) (*ResGetInfo, error)
	Register(ctx context.Context, in *ReqRegister, opts ...grpc.CallOption) (*ResGetInfo, error)
}

type playerClient struct {
	cc grpc.ClientConnInterface
}

func NewPlayerClient(cc grpc.ClientConnInterface) PlayerClient {
	return &playerClient{cc}
}

func (c *playerClient) GetInfoById(ctx context.Context, in *ReqGetInfoById, opts ...grpc.CallOption) (*ResGetInfo, error) {
	out := new(ResGetInfo)
	err := c.cc.Invoke(ctx, "/proto.Player/GetInfoById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) GetInfoByName(ctx context.Context, in *ReqGetInfoByName, opts ...grpc.CallOption) (*ResGetInfo, error) {
	out := new(ResGetInfo)
	err := c.cc.Invoke(ctx, "/proto.Player/GetInfoByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) Register(ctx context.Context, in *ReqRegister, opts ...grpc.CallOption) (*ResGetInfo, error) {
	out := new(ResGetInfo)
	err := c.cc.Invoke(ctx, "/proto.Player/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlayerServer is the server API for Player service.
// All implementations must embed UnimplementedPlayerServer
// for forward compatibility
type PlayerServer interface {
	GetInfoById(context.Context, *ReqGetInfoById) (*ResGetInfo, error)
	GetInfoByName(context.Context, *ReqGetInfoByName) (*ResGetInfo, error)
	Register(context.Context, *ReqRegister) (*ResGetInfo, error)
	mustEmbedUnimplementedPlayerServer()
}

// UnimplementedPlayerServer must be embedded to have forward compatible implementations.
type UnimplementedPlayerServer struct {
}

func (UnimplementedPlayerServer) GetInfoById(context.Context, *ReqGetInfoById) (*ResGetInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfoById not implemented")
}
func (UnimplementedPlayerServer) GetInfoByName(context.Context, *ReqGetInfoByName) (*ResGetInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfoByName not implemented")
}
func (UnimplementedPlayerServer) Register(context.Context, *ReqRegister) (*ResGetInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedPlayerServer) mustEmbedUnimplementedPlayerServer() {}

// UnsafePlayerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlayerServer will
// result in compilation errors.
type UnsafePlayerServer interface {
	mustEmbedUnimplementedPlayerServer()
}

func RegisterPlayerServer(s grpc.ServiceRegistrar, srv PlayerServer) {
	s.RegisterService(&Player_ServiceDesc, srv)
}

func _Player_GetInfoById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetInfoById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).GetInfoById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Player/GetInfoById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).GetInfoById(ctx, req.(*ReqGetInfoById))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_GetInfoByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetInfoByName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).GetInfoByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Player/GetInfoByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).GetInfoByName(ctx, req.(*ReqGetInfoByName))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqRegister)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Player/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).Register(ctx, req.(*ReqRegister))
	}
	return interceptor(ctx, in, info, handler)
}

// Player_ServiceDesc is the grpc.ServiceDesc for Player service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Player_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Player",
	HandlerType: (*PlayerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInfoById",
			Handler:    _Player_GetInfoById_Handler,
		},
		{
			MethodName: "GetInfoByName",
			Handler:    _Player_GetInfoByName_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _Player_Register_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "player.proto",
}
